=============================
Application Program Interface
=============================



********
**Files**
********

+-----------------------+----------------------------------------------------------------------+
| File                  | Description                                                          |
+=======================+======================================================================+
| Personis_base.py      | the core library that accesses models in local directories/files     |
+-----------------------+----------------------------------------------------------------------+
| Personis_a.py         | adds 'Active User Models' to Personis. This allows components to     |
|                       | be 'subscribable' and statements in a simple language to be executed |
|                       | when new component values satisfy a condition.                       |
+-----------------------+----------------------------------------------------------------------+
| Personis_server.py    | a server and set of stubs for the server version of Personis         |
|                       | uses Personis_a.py to do the work                                    |
+-----------------------+----------------------------------------------------------------------+
| Personis.py           | a wrapper for Personis_server                                        |
+-----------------------+----------------------------------------------------------------------+
| Tests/*               | scripts to test the system                                           |
+-----------------------+----------------------------------------------------------------------+
| Tests/Base/example*   | a set of code examples for models stored locally                     |
+-----------------------+----------------------------------------------------------------------+
| Tests/Server/example* | a set of code examples for models stored on a server                 |
+-----------------------+----------------------------------------------------------------------+
| mkmodel               | utility program to make a set of models from a                       |
+-----------------------+----------------------------------------------------------------------+
| modeldef              | definition file                                                      |
+-----------------------+----------------------------------------------------------------------+

********
**Constants**
********

ComponentTypes::

	"attribute"
	"activity"
	"knowledge"
	"belief"
	"preference"
	"goal"

ValueTypes::

	"string"
	"number"
	"boolean"
	"enum"
	"JSON"

EvidenceTypes::

	"explicit"  # given by the user  (given)
	"implicit"  # observed by the machine (observation)
	"exmachina" # told (to the user) by the machine (told)
	"inferred"  # evidence generated by inference (external or internal)
	"stereotype" # evidence added by a stereotype

********
**Functions**
********

|

.. code-block:: python

    # make a model with name "model" in directory modeldir for "user"/"password" with "description"
    MkModel(model=None, modeldir=None, user=None, password=None, description=None):

********
**Classes**
********

Component Class
---------------
A tree of model context which contain the components of the model

|

**Class Parameters**

+---------------------------------------------------------+
| **Identifier**                                          |
+=========================================================+
| The identifier of the component (Unique in the context) |
|                                                         |
| Type: string                                            |
+---------------------------------------------------------+

+----------------------+
| **Description**      |
+======================+
| Readable description |
|                      |
| Type: string         |
+----------------------+

+--------------------+
| **component_type** |
+====================+
| - "attribute"      |
| - "activity"       |
| - "knowledge"      |
| - "belief"         |
| - "preference"     |
| - "goal"           |
| Type: string       |
+--------------------+

+----------------+
| **value_type** |
+================+
| - "string"     |
| - "number"     |
| - "boolean"    |
| - "enum"       |
| - "JSON"       |
| Type: string   |
+----------------+

+----------------------------------------------------------------+
| **value_list**                                                 |
+================================================================+
| A list of strings that are the possible values for type "enum" |
|                                                                |
| Type: object                                                   |
+----------------------------------------------------------------+

+--------------------+
| **value**          |
+====================+
| The resolved value |
+--------------------+

+-------------------------------------+
| **resolver**                        |
+=====================================+
| Default resolver for this component |
+-------------------------------------+

+---------------------------------------------------------------------+
| **goals**                                                           |
+=====================================================================+
| List of component paths eg [ ['Personal', 'Health', 'weight'], ...] |
|                                                                     |
| Type: object                                                        |
+---------------------------------------------------------------------+

+--------------------------+
| **evidencelist**         |
+==========================+
| List of evidence objects |
|                          |
| Type: object             |
+--------------------------+


Evidence Class
--------------

Evidence object

|

**Class Parameters**

+--------------------------------------------------------------+
| **evidence_type**                                            |
+==============================================================+
| - "explicit": Given by the user                              |
| - "implicit": Observed by the machine                        |
| - "exmachina": Told (to the user) by the machine             |
| - "inferred": Evidence generated by a subscription inference |
| - "stereotype": Evidence added by a stereotype               |
| Type: string                                                 |
+--------------------------------------------------------------+

+--------------------+
| **source**         |
+====================+
| Source of evidence |
|                    |
| Type: string       |
+--------------------+

+-------------------+
| **value**         |
+===================+
| Any python object |
|                   |
| Type: object      |
+-------------------+

+--------------------------------------+
| **comment**                          |
+======================================+
| Extra information about the evidence |
|                                      |
| Type: string                         |
+--------------------------------------+

+-----------------------------+
| **flags**                   |
+=============================+
| A list of strings eg "goal" |
|                             |
| Type: array                 |
+-----------------------------+

+-----------+
| **time**  |
+===========+
| Timestamp |
+-----------+

+------------------------------------------+
| **useby**                                |
+==========================================+
| Timestamp evidence expires (if required) |
+------------------------------------------+

Context Class
-------------

Context object

|

**Class Parameters**

+---------------------------------------------------------+
| **Identifier**                                          |
+=========================================================+
| The identifier of the component (Unique in the context) |
| Type: string                                            |
+---------------------------------------------------------+

+----------------------+
| **Description**      |
+======================+
| Readable description |
|                      |
| Type: string         |
+----------------------+

+-------------------------------------------------+
| **resolver**                                    |
+=================================================+
| Default resolver for components in this context |
+-------------------------------------------------+

View Class
----------

View object

|

**Class Parameters**

+---------------------------------------------------------+
| **Identifier**                                          |
+=========================================================+
| The identifier of the component (Unique in the context) |
| Type: string                                            |
+---------------------------------------------------------+

+----------------------+
| **Description**      |
+======================+
| Readable description |
|                      |
| Type: string         |
+----------------------+

Access Class (Resolvers.Access)
-------------------------------

User model object

|

**Class Parameters**

+--------------+
| **model**    |
+==============+
| Model name   |
|              |
| Type: string |
+--------------+

+-----------------+
| **modeldir**    |
+=================+
| Model directory |
|                 |
| Type: string    |
+-----------------+

+------------------------------------------------+
| **authType**                                   |
+================================================+
| Type of authentication: either "user" or "app" |
|                                                |
| Type: string                                   |
+------------------------------------------------+

+----------------------------------------------------------------------+
| **auth**                                                             |
+======================================================================+
| Authentication credentials                                           |
|                                                                      |
| Type: string                                                         |
|                                                                      |
| - For users: "<user name>:<password>"                                |
| - For apps:  "<app name>:<nonce>-<timestamp>:<signature>"            |
| *App credentials should be generated using generate_app_signature()* |
+----------------------------------------------------------------------+

|

**Methods**

+-------------------------------------------------------------------------+
| **ask(self,  context=[], view=None, resolver=None, showcontexts=None)** |
+=========================================================================+
| Returns a list of component objects                                     |
|                                                                         |
| Parameters:                                                             |
|                                                                         |
| - context                                                               |
|                                                                         |
|   Type: array                                                           |
|                                                                         |
|   A list giving the path of context identifiers                         |
| - view                                                                  |
|                                                                         |
|   Type: string or array                                                 |
|                                                                         |
|   Default: None                                                         |
|                                                                         |
|   An identifier of a view in the context specified / a list of component|
|   identifiers or full path lists                                        |
|                                                                         |
|   "None" returns the values of all components in the context be returned|
| - resolver                                                              |
|                                                                         |
|   Type: string                                                          |
|                                                                         |
|   Default: None                                                         |
|                                                                         |
|   A string containing the name of a resolver / a dictionary containing  |
|   information about resolver(s) to be used and arguments                |
|                                                                         |
|   the "resolver" key gives the name of a resolver to use,if not present |
|   the default resolver is used the args may include a specified evidence|
|   filter                                                                |
|                                                                         |
|   e.g. evidence filter                                                  |
|                                                                         |
|   "all" returns all evidence items                                      |
|                                                                         |
|   "last10" returns last 10 evidence items                               |
|                                                                         |
|   "last1" returns most recent evidence items                            |
|                                                                         |
|   "all" returns all evidence items                                      |
| - showcontexts                                                          |
|                                                                         |
|   Type: bool                                                            |
|                                                                         |
|   Default: None                                                         |
|                                                                         |
|   if True, a tuple is returned containing (list of component objects,   |
|   list of contexts in the current context, list of views in the current |
|   context, list of subscriptions in the current context)                |
| Returns:                                                                |
|                                                                         |
| - A list of component objects                                           |
+-------------------------------------------------------------------------+


+-------------------------------------------------------------------------------------------+
| **tell(self, context=[], componentid=None, evidence=None,   # evidence obj dosubs=True)** |
+===========================================================================================+
| Tell the evidence to the component of the context                                         |
|                                                                                           |
| Parameters:                                                                               |
|                                                                                           |
| - context                                                                                 |
|                                                                                           |
|   Type: array                                                                             |
|                                                                                           |
|   A list giving the path to the required context                                          |
| - componentid                                                                             |
|                                                                                           |
|   Type: string                                                                            |
|                                                                                           |
|   Default: None                                                                           |
|                                                                                           |
|   Identifier of the component                                                             |
|                                                                                           |
| - evidence                                                                                |
|                                                                                           |
|   Type: object                                                                            |
|                                                                                           |
|   Default: None                                                                           |
|                                                                                           |
|   Evidence object to add to the component                                                 |
+-------------------------------------------------------------------------------------------+


+-------------------------------------------------------------------------------------------+
| **export_model(self,  context=[], evidence_filter=None, level=None)**                     |
+===========================================================================================+
| Returns a JSON encoded representation of the um tree                                      |
| Tell the evidence to the component of the context                                         |
|                                                                                           |
| Parameters:                                                                               |
|                                                                                           |
| - context                                                                                 |
|                                                                                           |
|   Type: array                                                                             |
|                                                                                           |
|   A list giving the path of context identifiers (this is the root of the um tree to       |
|   export)                                                                                 |
| - evidence_filter                                                                         |
|                                                                                           |
|   Type: string                                                                            |
|                                                                                           |
|   Default: None                                                                           |
|                                                                                           |
|   Specifies an evidence filter (Partially implemented)                                    |
|                                                                                           |
|   "all" returns all evidence items                                                        |
|                                                                                           |
|   "last10" returns last 10 evidence items                                                 |
|                                                                                           |
|   "last1" returns most recent evidence items                                              |
|                                                                                           |
|   "all" returns all evidence items                                                        |
| Returns:                                                                                  |
|                                                                                           |
| - A JSON encoded representation of the um tree                                            |
+-------------------------------------------------------------------------------------------+


+----------------------------------------------------------------------------------------+
| **import_model(self, context=[], partial_model=None)**                                 |
+========================================================================================+
| Import a model                                                                         |
|                                                                                        |
| Parameters:                                                                            |
|                                                                                        |
| - context                                                                              |
|                                                                                        |
|   Type: array                                                                          |
|                                                                                        |
|   Context to import partial model to. If None, use root of model                       |
| - partial_model                                                                        |
|                                                                                        |
|   Type: string                                                                         |
|                                                                                        |
|   Default: None                                                                        |
|                                                                                        |
|   string containing JSON representation of model dictionary / a dictionary with        |
|   elements (contextinfo - Description, Identifier, perms, resolver/contexts -          |
|   sub contexts/components/views/subs)                                                  |
+----------------------------------------------------------------------------------------+


+----------------------------------------------------------------+
| **set_goals(self, context=[], componentid=None, goals=None)**  |
+================================================================+
| Set the goal list for a component (requires "tell" permission) |
|                                                                |
| Parameters:                                                    |
|                                                                |
| - context                                                      |
|                                                                |
|   Type: array                                                  |
|                                                                |
|   A list giving the path to the required context               |
| - componentid                                                  |
|                                                                |
|   Type: string                                                 |
|                                                                |
|   Default: None                                                |
|                                                                |
|   Identifier of the component                                  |
| - goals                                                        |
|                                                                |
|   Type: array                                                  |
|                                                                |
|   Default: None                                                |
|                                                                |
|   List of goal component paths                                 |
+----------------------------------------------------------------+


+----------------------------------------------------------------+
| **mkcomponent(self, context=[], componentobj=None)**           |
+================================================================+
| Make a new component in a given context                        |
|                                                                |
| Parameters:                                                    |
|                                                                |
| - context                                                      |
|                                                                |
|   Type: array                                                  |
|                                                                |
|   A list giving the path to the required context               |
| - componentobj                                                 |
|                                                                |
|   Type: object                                                 |
|                                                                |
|   Default: None                                                |
|                                                                |
|   A Component object                                           |
| Returns:                                                       |
|                                                                |
| - success: Non                                                 |
| - error: A string error message                                |
+----------------------------------------------------------------+


+----------------------------------------------------------------+
| **delcomponent(self, context= [], componentid=None)**          |
+================================================================+
| Delete an existing component in a given context                |
|                                                                |
| Parameters:                                                    |
|                                                                |
| - context                                                      |
|                                                                |
|   Type: array                                                  |
|                                                                |
|   A list giving the path to the required context               |
| - componentobj                                                 |
|                                                                |
|   Type: object                                                 |
|                                                                |
|   Default: None                                                |
|                                                                |
|   A Component object                                           |
| Returns:                                                       |
|                                                                |
| - success: Non                                                 |
| - error: A string error message                                |
+----------------------------------------------------------------+


+----------------------------------------------------------------+
| **mkcontext(self, context= [], contextobj=None)**              |
+================================================================+
| Make a new context in a given context                          |
|                                                                |
| Parameters:                                                    |
|                                                                |
| - context                                                      |
|                                                                |
|   Type: array                                                  |
|                                                                |
|   A list giving the path to the required context               |
| - contextobj                                                   |
|                                                                |
|   Type: object                                                 |
|                                                                |
|   Default: None                                                |
|                                                                |
|   A Context object                                             |
| Returns:                                                       |
|                                                                |
| - success: True                                                |
| - error: A string error message                                |
+----------------------------------------------------------------+


+----------------------------------------------------------------+
| **delcontext(self, context=[])**                               |
+================================================================+
| Delete an existing context                                     |
|                                                                |
| Parameters:                                                    |
|                                                                |
| - context                                                      |
|                                                                |
|   Type: array                                                  |
|                                                                |
|   A list giving the path to the required context               |
| Returns:                                                       |
|                                                                |
| - success: None                                                |
| - error: A string error message                                |
+----------------------------------------------------------------+


+----------------------------------------------------------------+
| **getcontext(self, context=[], getsize=False)**                |
+================================================================+
| Get information (Description, size etc) of a context           |
|                                                                |
| Parameters:                                                    |
|                                                                |
| - context                                                      |
|                                                                |
|   Type: array                                                  |
|                                                                |
|   A list giving the path to the required context               |
| - getsize                                                      |
|                                                                |
|   Type: object                                                 |
|                                                                |
|   Default: False                                               |
|                                                                |
|   If True, return the size in bytes of the context subtree     |
| Returns:                                                       |
|                                                                |
| - success: None                                                |
| - error: A string error message                                |
+----------------------------------------------------------------+


+----------------------------------------------------------------+
| **registerapp(self, app=None, desc="", fingerprint=None)**     |
+================================================================+
| Registers an app                                               |
|                                                                |
| Parameters:                                                    |
|                                                                |
| - app                                                          |
|                                                                |
|   Type: string                                                 |
|                                                                |
|   Default: None                                                |
|                                                                |
|   App name                                                     |
| - desc                                                         |
|                                                                |
|   Type: string                                                 |
|                                                                |
|   Default: ""                                                  |
|                                                                |
|   The app description                                          |
| - fingerprint                                                  |
|                                                                |
|   Type: string                                                 |
|                                                                |
|   Default: None                                                |
|                                                                |
|   The fingerprint of the app's public key, as generated by     |
|   generate_app_fingerprint()                                   |
| Returns:                                                       |
|                                                                |
| - success: None                                                |
| - error: A string error message                                |
+----------------------------------------------------------------+


+----------------------------------------------------------------+
| **deleteapp(self, app=None)**                                  |
+================================================================+
| Delete an app                                                  |
|                                                                |
| Parameters:                                                    |
|                                                                |
| - app                                                          |
|                                                                |
|   Type: string                                                 |
|                                                                |
|   Default: None                                                |
|                                                                |
|   App name                                                     |
+----------------------------------------------------------------+


+----------------------------------------------------------------+
| **listrequests(self)**                                         |
+================================================================+
| Returns a dictionary of apps that have requested access        |
|                                                                |
| Returns:                                                       |
|                                                                |
| - key: App name                                                |
| - description: App description                                 |
| - fingerprint: Fingerprint of app public key                   |
+----------------------------------------------------------------+


+----------------------------------------------------------------+
| **listapps(self)**                                             |
+================================================================+
| Returns an dictionary of apps that are registered              |
|                                                                |
| Returns:                                                       |
|                                                                |
| - key: App name                                                |
| - description: App description                                 |
+----------------------------------------------------------------+


+-----------------------------------------------------------------------------------+
| **setpermission(self, context=None, componentid=None, app=None, permissions={})** |
+===================================================================================+
| Sets ask/tell permission for a context (if componentid is None) or a component    |
|                                                                                   |
| Parameters:                                                                       |
|                                                                                   |
| - context                                                                         |
|                                                                                   |
|   Type: array                                                                     |
|                                                                                   |
|   Default: None                                                                   |
|                                                                                   |
|   A list giving the path to the required context                                  |
| - componentid                                                                     |
|                                                                                   |
|   Type: string                                                                    |
|                                                                                   |
|   Default: None                                                                   |
|                                                                                   |
|   Identifier of the component                                                     |
| - app                                                                             |
|                                                                                   |
|   Type: string                                                                    |
|                                                                                   |
|   Default: None                                                                   |
|                                                                                   |
|   App name                                                                        |
| - permissions                                                                     |
|                                                                                   |
|   Type: object                                                                    |
|                                                                                   |
|   Default: {}                                                                     |
|                                                                                   |
|   Need to put description                                                         |
+-----------------------------------------------------------------------------------+



+----------------------------------------------------------------+
| **setresolver(self, context, componentid, resolver)**          |
+================================================================+
| Set resolver (Need to update)                                  |
|                                                                |
| Parameters:                                                    |
|                                                                |
| - context                                                      |
|                                                                |
|   Type: array                                                  |
|                                                                |
|   A list giving the path to the required context               |
| - componentid                                                  |
|                                                                |
|   Type: string                                                 |
|                                                                |
|   Identifier of the component                                  |
| - resolver                                                     |
|                                                                |
|   Type: ?                                                      |
|                                                                |
|   Need to put description                                      |
+----------------------------------------------------------------+


+----------------------------------------------------------------+
| **getresolvers(self)**                                         |
+================================================================+
| Get resolver (Need to update)                                  |
|                                                                |
| Returns:                                                       |
|                                                                |
| - Need to put description                                      |
+----------------------------------------------------------------+


+----------------------------------------------------------------+
| **mkview(self, context= [], viewobj=None)**                    |
+================================================================+
| Make a new view in a given context                             |
|                                                                |
| Parameters:                                                    |
|                                                                |
| - context                                                      |
|                                                                |
|   Type: array                                                  |
|                                                                |
|   A list giving the path to the required context               |
| - viewobj                                                      |
|                                                                |
|   Type: object                                                 |
|                                                                |
|   Default: None                                                |
|                                                                |
|   A View object                                                |
+----------------------------------------------------------------+


+----------------------------------------------------------------+
| **delview(self, context=[], viewid=None)**                     |
+================================================================+
| Delete an existing view within a given context                 |
|                                                                |
| Parameters:                                                    |
|                                                                |
| - context                                                      |
|                                                                |
|   Type: array                                                  |
|                                                                |
|   A list giving the path to the required context               |
| - viewid                                                       |
|                                                                |
|   Type: string                                                 |
|                                                                |
|   Default: None                                                |
|                                                                |
|   A view identifier                                            |
| Returns:                                                       |
|                                                                |
| - success: None                                                |
| - error: A string error message                                |
+----------------------------------------------------------------+


+----------------------------------------------------------------+
| **subscribe(context=[], view=None, subscription=None)**        |
+================================================================+
| Add a subscription to the component specified by the context   |
| and view                                                       |
|                                                                |
| Parameters:                                                    |
|                                                                |
| - context                                                      |
|                                                                |
|   Type: array                                                  |
|                                                                |
|   A list giving the path to the required context               |
| - view                                                         |
|                                                                |
|   Type: object                                                 |
|                                                                |
|   Default: None                                                |
|                                                                |
|   A view object                                                |
| - subscription                                                 |
|                                                                |
|   Type: object                                                 |
|                                                                |
|   Default: None                                                |
|                                                                |
|   A dictionary containing owner, password and subscription     |
|   statement string                                             |
| Returns:                                                       |
|                                                                |
| - token: it can be used to delete the subscription             |
+----------------------------------------------------------------+



+----------------------------------------------------------------+
| **delete_sub(context=[], componentid=None, subname=None)**     |
+================================================================+
| deletes a subscription specified by the token subname in the   |
| component specified by the context and componentid             |
|                                                                |
| Parameters:                                                    |
|                                                                |
| - context                                                      |
|                                                                |
|   Type: array                                                  |
|                                                                |
|   A list giving the path to the required context               |
| - componentid                                                  |
|                                                                |
|   Type: string                                                 |
|                                                                |
|   Default: None                                                |
|                                                                |
|   Identifier of the component                                  |
| - subname                                                      |
|                                                                |
|   Type: string                                                 |
|                                                                |
|   Default: None                                                |
|                                                                |
|   A token return from the subscribe call when the subscription |
|   is installed also available using an ask call with           |
|   showcontexts=True                                            |
| Returns:                                                       |
|                                                                |
| - success: None                                                |
| - error: A string error message                                |
+----------------------------------------------------------------+

********
**Examples**
********

Models can be accessed either locally in the filesystem, or via a server.

Local access is via the Personis_base module.

**Basic accretion operation - tell some evidence**

The following example shows the use of Personis_base to *tell* a piece of evidence 
containing a name string to a component in the model.  The source of the evidence 
is "contactapp" which will have been given access to the model by the owner.

::

	import Personis_base

	# access the model in the filesystem
	# model name is "alice", model is stored in directory "Models"
	key = import_app_key("contactapp")
	auth = "contactapp:" + Personis_base.generate_app_signature("contactapp", key)
	um = Personis_base.Access(model="alice", modeldir='Models', authType='app', auth=auth)

	# create a piece of evidence with Alice as value
	ev = Personis_base.Evidence(evidence_type="explicit", value="Alice")

	# tell this as user alice's first name into component "firstname", context "Personal"
	um.tell(context=["Personal"], componentid="firstname", evidence=ev)


**Basic resolution operation - ask for a value**

This example *ask*
s for the value of a component using the default resolver that uses the most recent piece of evidence.

::

	import Personis_base

	key = import_app_key("contactapp")
	auth = "contactapp:" + Personis_base.generate_app_signature("contactapp", key)
	um = Personis_base.Access(model="alice", modeldir='Models', authType='app', auth=auth)

	# now ask for the value of the component using the default resolver and the last piece of evidence
	reslist = um.ask(context=["Personal"], view=["firstname"], resolver=dict(evidence_filter="last1"))

A *view* is just a list of components. 
The list can be explicit in the ask request or we can give a view a name and store it in the model.

We can make a view using a view object and the *mkview* method. For example:

::

	import Personis_base

	key = import_app_key("contactapp")
	auth = "contactapp:" + Personis_base.generate_app_signature("contactapp", key)
	um = Personis_base.Access(model="alice", modeldir='Models', authType='app', auth=auth)

	vobj = Personis_base.View(Identifier="fullname", component_list=["firstname", "lastname"])
	um.mkview(context=["Personal"], viewobj=vobj)

	reslist= um.ask(context=["Personal"], view = 'fullname', resolver={'evidence_filter':"all"})

The values are returned by an ask request in a list of component objects, one for each component value requested.
The component objects have the attributes described in the documentation above but this includes a value attribute which is the resolved value for the component. Eg:

::


	reslist = um.ask(context=["Personal"], view=["firstname"], resolver=dict(evidence_filter="last1"))
	print "Firstname:", reslist[0].value

**Creating new contexts and components**

The *mkcontext* and *mkcomponent* methods, along with the *Component* and *Context* objects, are used to build new elements in the model. 
Here is an example of creating and then deleting a context:

::

	# assume we have accessed the model
	print "creating context 'Deltest' in context 'Personal'"
	cobj = Personis_base.Context(Identifier="Deltest", Description="testing context deletion")
	# now make the new context
	um.mkcontext(context=["Personal"], contextobj=cobj)

	print "now delete it"
	um.delcontext(context=["Personal", "Deltest"]):

and here is an example of creating and then deleting a component:

::

	cobj = Personis_base.Component(Identifier="age", component_type="attribute", Description="age", goals=[['Personal', 'Health', 'weight']], value_type="number")

	um.mkcomponent(context=["Personal"], componentobj=cobj)

	# tell some evidence to the new component
	ev = Personis_base.Evidence(evidence_type="explicit", value=17)
	um.tell(context=["Personal"], componentid='age', evidence=ev)
	reslist = um.ask(context=["Personal"], view=['age'], resolver={'evidence_filter':"all"})
	print "Age:", reslist[0].value

	# delete the component
	resd = um.delcomponent(context=["Personal"], componentid = "age")

**Navigating the Model**

If you want to discover what contexts are present in the model there is a variant on the *ask* method that allows you to get a list of all the *contexts*, *components*, *views* and *subscriptions* that are contained in a given context.
Just add the parameter "showcontexts=True" to the ask call.
Using this call you can start at the root context and walk the tree of contexts discovering the full contents of the model. Eg:

::

	print "Show the root context"
	info = um.ask(context=[""], showcontexts=True)

The return value is a tuple containing (componentlist, contextlist, viewlist, sublist), where each part of the tuple is a list of objects.

**Subscriptions: rules for action**

A feature of Personis is the ability to add a rule to a component that is examined when ever a *tell* operation is performed on the component.
The rule typically examines a resolved value of the component, matching against a pattern.
If the pattern is matched an action is initiated.
The action can be a *tell* operation to tell some evidence to a component, or a *notify* operation that will construct a URL and fetch it, thus initiating some action at an external web site.
Rules can be deleted using the *delete_sub* method.

Note that you need to use Personis_a instead of Personis_base as that is where the subscription methods are found.

For example:

::

	import Personis_base
	import Personis_a

	key = import_app_key("contactapp")
	auth = "contactapp:" + Personis_base.generate_app_signature("contactapp", key)
	um = Personis_a.Access(model="alice", modeldir='Models', authType='app', auth=auth)

	# subscription rule that will match firstname against a wildcard pattern (regular expression):
	sub = """
	<default!./Personal/firstname> ~ '.*' :
	         NOTIFY 'http://www.myweb.me/~alice/action.cgi?' 'firstname=' <./Personal/firstname>
	"""

	# a token identifying the rule is returned
	subtoken = um.subscribe(context=["Personal"], view=['firstname'], subscription={'user':'alice', 'password':'secret', 'statement':sub})

	ev = Personis_base.Evidence(evidence_type="explicit", value="Alice")
	# do a tell. This should cause the action.cgi script to be invoked with the firstame
	um.tell(context=["Personal"], componentid='firstname', evidence=ev)

	# delete the rule
	um.delete_sub(context=["Personal"], componentid='lastname', subname=subtoken)

**Import and Export of Models**

Models can be imported and exported in JSON (JavaScript Object Notation) form using the *export_model* and import_model methods:

::

	import Personis_base
	import Personis_a

	key = import_app_key("contactapp")
	auth = "contactapp:" + Personis_base.generate_app_signature("contactapp", key)
	um = Personis_a.Access(model="alice", modeldir='Models', authType='app', auth=auth)

	# export a model sub tree to JSON
	# note that all evidence will also be exported.
	modeljson = um.export_model(["Personal"], evidence_filter="all")
	print modeljson

	# import the same model tree but into a different context.
	um.import_model(context=["Temp"], partial_model=modeljson)

